@model AutoTest.Models.NewTestView

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@if (ViewBag.Msg != null)
{
    <div class="alert alert-danger" role="alert">
        @ViewBag.Msg
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Test</h4>
        @Html.HiddenFor(model => model.UserID)
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.Date, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Date, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.Date, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="col-md-6">
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-primary" />
                        @Html.ActionLink("Back to List", "Index", new { }, new { @class = "btn btn-success" })
                        @Html.ActionLink("Summary Importance", "SummaryImportance", new { }, new { @class = "btn btn-light" })
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<h4>Summary Importance</h4>
<hr />
@if (Model.Details.Count == 0)
{
    <h5>No details added yet</h5>
}
else
{

    WebGrid grid = new WebGrid(Model.Details, rowsPerPage: 4);

    <div class="row">
        @grid.GetHtml(
        tableStyle: "table table-responsive table-striped table-bordered",
        columns: grid.Columns(
            grid.Column(header: "SubCategoryName", format: @<text><div class="" data-id="@item.TestDetailTmpID" data-propertyname="Name">@item.SubCategoryName</div></text>),
grid.Column(header: "Value", format:@<text><div class="editSelect" data-id="@item.TestDetailTmpID" data-propertyname="TestAnswerID">@item.TestAnswer.Value</div></text>)
)
)
    </div>

    @*<table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Details[0].SubCategoryName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Details[0].TestAnswer.TestAnswerID)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model.Details)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.SubCategoryName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TestAnswer.Value)
                </td>

            </tr>
        }*@

    @*<tr>
        <td colspan="4" align="right">
            <strong>Result</strong>
        </td>
        <td align="right">
            <strong> @Html.DisplayFor(model => model.TotalSummaryImportance)</strong>
        </td>

        <th></th>
    </tr>*@

    @*</table>*@
}

@section scripts{
    <script src="https://www.appelsiini.net/download/jquery.jeditable.js"></script>

    <script>
        $(document).ready(function () {
            var oldValue = '';
            $('.edit').editable('/TestHeaders/editdetailtmp', {
                cssclass: 'jeditForm',
                tooltip: 'click to edit me...',
                width: 'none',
                height: 'none',
                onsubmit: function (settings, original) {
                    oldValue = original.revert;
                },
                submitdata: function () {
                    return {
                        id: $(this).data('id'),
                        PropertyName: $(this).data('propertyname')
                    }
                },
                callback: function (value, settings) {
                    var jsonData = $.parseJSON(value);
                    if (jsonData.status) {
                        $(this).text(jsonData.value);
                    }
                    else {
                        $(this).text(oldValue);
                    }
                }
            })

            $('.editSelect').editable('/TestHeaders/editdetailtmp', {
                cssclass: 'jeditForm',
                tooltip: 'Valorar',
                width: 'none',
                height: 'none',
                type: 'select',
                submit: 'Ok',
                loadurl: '/TestHeaders/GetTestAnswerValor',
                loaddata: function () {
                    return { id: $(this).data('id') }
                },
                onsubmit: function (settings, original) {
                    oldValue = original.revert;
                },
                submitdata: function () {
                    return {
                        id: $(this).data('id'),
                        PropertyName: $(this).data('propertyname')
                    }
                },
                callback: function (value, settings) {
                    var jsonData = $.parseJSON(value);
                    if (jsonData.status) {
                        $(this).text(jsonData.value);
                    }
                    else {
                        $(this).text(oldValue);
                    }
                }
            })
            $('.editSelect').click(function () {
                $('select', this).addClass('form-control pull-left 100');
                $('button', this).addClass('btn btn-primary margin10');
            })
        })
    </script>
}

@*@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}*@

